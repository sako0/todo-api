// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/repository/todo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sako0/todo-api/app/domain/model"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// DeleteTodo mocks base method.
func (m *MockTodoRepository) DeleteTodo(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoRepositoryMockRecorder) DeleteTodo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoRepository)(nil).DeleteTodo), id)
}

// GetTodoById mocks base method.
func (m *MockTodoRepository) GetTodoById(id uint) model.Todo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoById", id)
	ret0, _ := ret[0].(model.Todo)
	return ret0
}

// GetTodoById indicates an expected call of GetTodoById.
func (mr *MockTodoRepositoryMockRecorder) GetTodoById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoById", reflect.TypeOf((*MockTodoRepository)(nil).GetTodoById), id)
}

// ListTodo mocks base method.
func (m *MockTodoRepository) ListTodo() []model.Todo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodo")
	ret0, _ := ret[0].([]model.Todo)
	return ret0
}

// ListTodo indicates an expected call of ListTodo.
func (mr *MockTodoRepositoryMockRecorder) ListTodo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodo", reflect.TypeOf((*MockTodoRepository)(nil).ListTodo))
}

// PostTodo mocks base method.
func (m *MockTodoRepository) PostTodo(text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostTodo", text)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostTodo indicates an expected call of PostTodo.
func (mr *MockTodoRepositoryMockRecorder) PostTodo(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTodo", reflect.TypeOf((*MockTodoRepository)(nil).PostTodo), text)
}

// UpdateTodoText mocks base method.
func (m *MockTodoRepository) UpdateTodoText(id uint, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodoText", id, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTodoText indicates an expected call of UpdateTodoText.
func (mr *MockTodoRepositoryMockRecorder) UpdateTodoText(id, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodoText", reflect.TypeOf((*MockTodoRepository)(nil).UpdateTodoText), id, text)
}
